<template>
  <a-card :bordered="false">
    <div class="table-page-search-wrapper">
      <a-form layout="inline">
        <a-row :gutter="48">
          <a-col :md="8" :sm="24">
            <a-form-item label="角色ID">
              <a-input placeholder="请输入"/>
            </a-form-item>
          </a-col>
          <a-col :md="8" :sm="24">
            <a-form-item label="状态">
              <a-select placeholder="请选择" default-value="0">
                <a-select-option value="0">全部</a-select-option>
                <a-select-option value="1">关闭</a-select-option>
                <a-select-option value="2">运行中</a-select-option>
              </a-select>
            </a-form-item>
          </a-col>
          <a-col :md="8" :sm="24">
            <span class="table-page-search-submitButtons">
              <a-button type="primary">查询</a-button>
              <a-button style="margin-left: 8px">重置</a-button>
               <a-button type="primary" style="margin-left: 8px" @click="handleAdd()">新增</a-button>
            </span>
          </a-col>
        </a-row>
      </a-form>
    </div>

    <s-table
      size="default"
      :columns="columns"
      :data="loadData"
      :showPagination="false"
      :rowKey="record => record.id"
      ref="role"
    >
       <span slot="status" slot-scope="text">
        {{ text | statusFilter }}
      </span>
      <span slot="action" slot-scope="text, record">
        <a @click="handleEdit(record)">编辑</a>
        <a-divider type="vertical"/>
        <a-dropdown>
          <a class="ant-dropdown-link">
            更多 <a-icon type="down"/>
          </a>
          <a-menu slot="overlay">
            <a-menu-item>
              <a href="javascript:;" @click="handleAuth(record)">授权</a>
            </a-menu-item>
            <a-menu-item>
              <a href="javascript:;">删除</a>
            </a-menu-item>
          </a-menu>
        </a-dropdown>
      </span>
    </s-table>

    <a-modal
      title="操作"
      style="top: 20px;"
      :width="800"
      v-model="visible"
      @ok="handleOk"
      :destroyOnClose="true"
    >
      <a-form :form="form">
        <a-form-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="角色名称"
          hasFeedback
        >
          <a-input placeholder="起一个名字" v-model="mdl.name" id="role_name"/>
        </a-form-item>

        <a-form-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="排序"
          hasFeedback
        >
          <a-input
            placeholder=""
            id="seq"
            v-decorator="[
              'seq',
              {
                initialValue: mdl.seq,
                rules: [{ required: true, message: '排序不能为空,且必须是数字',pattern:'^[0-9]*$'}],
              }
            ]"
          />
        </a-form-item>

        <a-form-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="状态"
          hasFeedback
        >
          <a-select v-model="mdl.status">
            <a-select-option :value="1">正常</a-select-option>
            <a-select-option :value="0">禁用</a-select-option>
          </a-select>
        </a-form-item>

        <a-form-item
          :labelCol="labelCol"
          :wrapperCol="wrapperCol"
          label="描述"
          hasFeedback
        >
          <a-textarea :rows="5" v-model="mdl.describe" placeholder="..." id="describe"/>
        </a-form-item>
      </a-form>
    </a-modal>
    <a-modal
      title="操作"
      style="top: 20px;"
      :width="800"
      v-model="author"
      @ok="handleOk"
      :destroyOnClose="true"
      :afterClose="handleCancel"
    >
      <a-card :bordered="false">
        <a-table :columns="column" :dataSource="mdl.permissions" :pagination="false" :rowKey="record => record.permissionId">
          <span slot="actions" slot-scope="text, record">
             <a-checkbox
               @change="value => onCheckAllChange(value,record.actionsOptions)"
             >
            全选
          </a-checkbox>
          <a-checkbox-group :options="record.actionsOptions"  v-model="selectedRowKeys" @change="onChange"/>
          </span>
        </a-table>
      </a-card>
    </a-modal>
  </a-card>
</template>

<script>
  import { STable } from '@/components'
  import { mapActions } from 'vuex'
  import { addRole, modifyRole, authRole, getRoleList} from '@/api/manage'

  export default {
    name: 'TableList',
    components: {
      STable
    },
    data () {
      return {
        description: '',
        visible: false,
        author: false,
        type: 0,
        checkAll: false,
        labelCol: {
          xs: { span: 24 },
          sm: { span: 5 }
        },
        wrapperCol: {
          xs: { span: 24 },
          sm: { span: 16 }
        },
        form: this.$form.createForm(this),
        mdl: {},

        // 高级搜索 展开/关闭
        advanced: false,
        // 查询参数
        queryParam: {},
        // 表头
        columns: [
          {
            title: '角色名称',
            dataIndex: 'name'
          },
          {
            title: 'ID',
            dataIndex: 'id'
          },
          {
            title: '状态',
            dataIndex: 'status',
            scopedSlots: { customRender: 'status' }
          },
          {
            title: '创建时间',
            dataIndex: 'createTime'
          },
          {
            title: '排序',
            dataIndex: 'seq',
            sorter: (a, b) => a.seq - b.seq
          },
          {
            title: '操作',
            width: '150px',
            dataIndex: 'action',
            scopedSlots: { customRender: 'action' }
          }
        ],
        column: [
          {
            title: '权限名称',
            dataIndex: 'permissionName'
          },
          {
            title: '操作权限',
            dataIndex: 'actions',
            scopedSlots: { customRender: 'actions' }
          }
        ],
        // 加载数据方法 必须为 Promise 对象
        loadData: () => {
          return getRoleList()
            .then(res => {
              console.log('getRoleList', res)
              const roles = {
                data: res.data
              }
              return roles
            }).catch(err => {
              return err
            })
        },
        selectedRowKeys: [],
      }
    },
    filters: {
      statusFilter (status) {
        const statusMap = {
          1: '正常',
          0: '禁用'
        }
        return statusMap[status]
      }
    },
    created () {
    },
    methods: {
      ...mapActions(['Permission', 'AddMenu', 'ModifyMenu']),
      handleEdit (record) {
        this.mdl = Object.assign({}, record)
        if (this.mdl.seq) {
          this.mdl.seq = String(this.mdl.seq)
        }
        this.type = 2
        this.visible = true
      },
      handleOk () {
        const {
          form: { validateFields },
          mdl
        } = this
        validateFields({ force: true }, (errs, values) => {
          if (!errs) {
            this.visible = false
            const param = {}
            param.id = mdl.id
            param.role_Name = mdl.name
            param.seq = values.seq
            param.description = mdl.describe
            param.status = mdl.status
            if (this.type === 1) {
              addRole(param).then(res => {
                this.notice(res)
                this.$refs.role.refresh(true)
              }).catch(err => {

              })
            } else if (this.type === 2) {
              modifyRole(param).then(res => {
                this.notice(res)
                this.$refs.role.refresh(true)
              }).catch(err => {

              })
            } else if (this.type === 3) {
              const auth = {}
              this.author = false
              auth.id = mdl.id
              auth.auth = []
              this.selectedRowKeys.forEach(s => {
                const selected = s.split(',')
                const per = {}
                per.actions = selected[0]
                per.perId = selected[1]
                auth.auth.push(per)
              })
              console.log(auth)
              authRole(auth).then(res => {
                this.notice(res)
                this.$refs.role.refresh(true)
              }).catch(err => {

              })
            }
          }
        })
      },
      handleAdd () {
        this.mdl = {}
        this.visible = true
        this.type = 1
      },
      handleAuth (record) {
        this.mdl = Object.assign({}, record)
        this.type = 3
        this.getActionsOptions(this.mdl.permissions)
        console.log(this.selectedRowKeys)
        console.log(this.mdl.permissions)
        this.author = true
      },
      toggleAdvanced () {
        this.advanced = !this.advanced
      },
      notice (res) {
        this.$notification.success({
          message: '结果',
          description: res.msg
        })
      },
      handleCancel () {
        this.selectedRowKeys = []
      },
      getActionsOptions(permission){
        if(permission) {
          permission.forEach(permission => {
            permission.actionsOptions = permission.actions.map(action => {
              return {
                label: action.describe,
                value: action.action + ',' + permission.permissionId,
                defaultCheck: false
              }
            })
            permission.checkeds = permission.actionEntitySet.map(action => {
              return action.action + ',' + permission.permissionId
            })
            console.log(permission.checkeds)
            this.selectedRowKeys = this.selectedRowKeys.concat(permission.checkeds)
            if(permission.children && permission.children.length){
                this.getActionsOptions(permission.children)
            }
          })
        }
      },
      onChange (checkedList) {
        // this.checkAll = checkedList.length === plainOptions.length
      },
      onCheckAllChange (e,actions) {
        Object.assign(this, {
          selectedRowKeys: e.target.checked ? this.selectedRowKeys.concat(actions.map(a=>a.value)) : this.selectedRowKeys.filter(s=>{
           return  !actions.map(a=>a.value).includes(s)
          }),
        })
      },
    },
    watch: {}
  }
</script>
